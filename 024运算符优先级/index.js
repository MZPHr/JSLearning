//运算符优先级
/**
 * 1    "()"
 * 2    "一元运算符(++自增 --自减 !非)"
 * 3    "*乘法, /除法, %求余, **幂"
 * 4    "加减法"
 * 5    "关系操作符"
 * 6    "与"
 * 7    "或"
 * 8    "赋值"
 * 
 *从上到下优先级逐渐减小
 *3 和 4 合并为算术操作符
 *所以，可简化为：
 * ()
 * 一元运算符
 * 算术运算符
 * 关系运算符
 * 与
 * 或
 * 赋值
 */
//例子
var num1 = 1 + 1 * 2;
alert(num1);                //输出3
var num2 = (1 + 1) * 2;     //显而易见，圆括号改变运算符优先级,而圆括号也因此成为优先级最高的，因为我们希望圆括号中的表达式优先运算
alert(num2);                //输出4

alert(!(false && false));   //false && false返回false，加上非就返回true
alert(! false && false);    //! false 返回true,于是就成为了true && false 返回flase,所以!的优先级大于&&
//运算符优先级很重要